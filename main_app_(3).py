# -*- coding: utf-8 -*-
"""main_app (3).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W3n0zYi-0wnUuIArPiVLqww-I6kql1Zb
"""

import streamlit as st
import joblib
import numpy as np
import pandas as pd

# Load model and preprocessing
model = joblib.load('catboost_model.pkl')
scaler = joblib.load('scaler.pkl')
pca = joblib.load('pca.pkl')
feature_names = joblib.load('feature_names.pkl')  # All 15 features
pca_input_features = [col for col in feature_names if col not in ['count_floors_pre_eq', 'count_families']]  # 13 features for PCA

st.set_page_config(page_title="Building Damage Prediction", layout="centered")
st.title(" Predict Building Damage Level from Earthquake")

# ==== User Input ====
inputs = {}
inputs['geo_level_1_id'] = st.number_input("Geo Level 1 ID", 0, 50, 15)
inputs['geo_level_2_id'] = st.number_input("Geo Level 2 ID", 0, 100, 25)
inputs['geo_level_3_id'] = st.number_input("Geo Level 3 ID", 0, 200, 50)
inputs['count_floors_pre_eq'] = st.number_input("Number of Floors (Before Earthquake)", 1, 10, 2)
inputs['age'] = st.number_input("Building Age (years)", 0, 150, 20)
inputs['area_percentage'] = st.slider("Area Percentage (%)", 0, 100, 10)
inputs['height_percentage'] = st.slider("Height Percentage (%)", 0, 100, 5)

# Categorical
inputs['land_surface_condition'] = st.selectbox("Land Surface Condition", ["Flat", "Moderate", "Steep"])
inputs['foundation_type'] = st.selectbox("Foundation Type", ["RC", "Stone", "Mud", "Brick", "Other"])
inputs['roof_type'] = st.selectbox("Roof Type", ["Bamboo", "Metal", "Thatched", "Other"])
inputs['ground_floor_type'] = st.selectbox("Ground Floor Type", ["Mud", "Cement", "Wood", "Brick"])
inputs['other_floor_type'] = st.selectbox("Other Floor Type", ["None", "Timber", "RC", "Other"])
inputs['position'] = st.selectbox("Building Position", ["Attached", "Corner", "Independent"])
inputs['plan_configuration'] = st.selectbox("Plan Configuration", ["Rectangular", "Square", "L-shape", "T-shape", "Other"])
inputs['has_superstructure_timber'] = st.selectbox("Timber Superstructure", ["No", "Yes"])
inputs['legal_ownership_status'] = st.selectbox("Legal Ownership Status", ["Private", "Rented", "Other"])
inputs['count_families'] = st.number_input("Number of Families", 1, 20, 1)

# Mapping categorical to numeric
mappings = {
    'land_surface_condition': {"Flat": 0, "Moderate": 1, "Steep": 2},
    'foundation_type': {"RC": 0, "Stone": 1, "Mud": 2, "Brick": 3, "Other": 4},
    'roof_type': {"Bamboo": 0, "Metal": 1, "Thatched": 2, "Other": 3},
    'ground_floor_type': {"Mud": 0, "Cement": 1, "Wood": 2, "Brick": 3},
    'other_floor_type': {"None": 0, "Timber": 1, "RC": 2, "Other": 3},
    'position': {"Attached": 0, "Corner": 1, "Independent": 2},
    'plan_configuration': {"Rectangular": 0, "Square": 1, "L-shape": 2, "T-shape": 3, "Other": 4},
    'has_superstructure_timber': {"No": 0, "Yes": 1},
    'legal_ownership_status': {"Private": 0, "Rented": 1, "Other": 2}
}

# Apply mappings
for key, mapping in mappings.items():
    inputs[key] = mapping[inputs[key]]

# Create DataFrame in correct feature order
df = pd.DataFrame([[inputs[col] for col in feature_names]], columns=feature_names)

# ==== Prediction ====
if st.button("üîç Predict"):
    try:
        # Scaling
        df_scaled = scaler.transform(df)

        # Select only features used for PCA
        df_scaled_pca = pd.DataFrame(df_scaled, columns=feature_names)[pca_input_features]

        # Apply PCA
        data_pca = pca.transform(df_scaled_pca)

        # Predict
        pred = model.predict(data_pca)[0]
        label = ["Low", "Medium", "High"][int(pred)]

        st.success(f"üè∑Ô∏è Predicted Damage Level: **{label}**")
    except Exception as e:
        st.error(f"An error occurred: {e}")

