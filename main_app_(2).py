# -*- coding: utf-8 -*-
"""main_app (2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YPyTBLe7_AQqS3DVY5pIHsi3f0KbkiA-
"""

import streamlit as st
import joblib
import numpy as np
import pandas as pd

# Load model dan preprocessing
model = joblib.load('catboost_model.pkl')
scaler = joblib.load('scaler.pkl')
pca = joblib.load('pca.pkl')
feature_names = joblib.load('feature_names.pkl')  # Pastikan ini urutannya sama persis

st.title("🏚️ Prediksi Tingkat Kerusakan Bangunan akibat Gempa")

# Input user sesuai feature_names urutan dan nama kolom
# Contoh buat fitur sesuai urutan feature_names
inputs = {}

for feature in feature_names:
    # Simplifikasi: buat input number untuk fitur numerik, selectbox untuk kategorikal.
    # Sesuaikan input type dengan nama fitur di feature_names
    if feature in ['geo_level_1_id', 'geo_level_2_id', 'geo_level_3_id', 'age', 'area_percentage', 'height_percentage']:
        inputs[feature] = st.number_input(f"{feature}", value=0)
    elif feature == 'land_surface_condition':
        inputs[feature] = st.selectbox(f"{feature}", ["Flat", "Moderate", "Steep"])
    elif feature == 'foundation_type':
        inputs[feature] = st.selectbox(f"{feature}", ["RC", "Stone", "Mud", "Brick", "Other"])
    elif feature == 'roof_type':
        inputs[feature] = st.selectbox(f"{feature}", ["Bamboo", "Metal", "Thatched", "Other"])
    elif feature == 'ground_floor_type':
        inputs[feature] = st.selectbox(f"{feature}", ["Mud", "Cement", "Wood", "Brick"])
    elif feature == 'other_floor_type':
        inputs[feature] = st.selectbox(f"{feature}", ["None", "Timber", "RC", "Other"])
    elif feature == 'position':
        inputs[feature] = st.selectbox(f"{feature}", ["Attached", "Corner", "Independent"])
    elif feature == 'plan_configuration':
        inputs[feature] = st.selectbox(f"{feature}", ["Rectangular", "Square", "L-shape", "T-shape", "Other"])
    elif feature == 'has_superstructure_timber':
        inputs[feature] = st.selectbox(f"{feature}", ["Tidak", "Ya"])
    elif feature == 'legal_ownership_status':
        inputs[feature] = st.selectbox(f"{feature}", ["Milik Pribadi", "Sewa", "Lainnya"])
    else:
        inputs[feature] = st.number_input(f"{feature}", value=0)  # fallback

# Mapping kategori ke angka — pastikan mapping sama dengan saat training
land_surface_condition_dict = {"Flat": 0, "Moderate": 1, "Steep": 2}
foundation_type_dict = {"RC": 0, "Stone": 1, "Mud": 2, "Brick": 3, "Other": 4}
roof_type_dict = {"Bamboo": 0, "Metal": 1, "Thatched": 2, "Other": 3}
ground_floor_type_dict = {"Mud": 0, "Cement": 1, "Wood": 2, "Brick": 3}
other_floor_type_dict = {"None": 0, "Timber": 1, "RC": 2, "Other": 3}
position_dict = {"Attached": 0, "Corner": 1, "Independent": 2}
plan_configuration_dict = {"Rectangular": 0, "Square": 1, "L-shape": 2, "T-shape": 3, "Other": 4}
has_superstructure_timber_dict = {"Tidak": 0, "Ya": 1}
legal_ownership_status_dict = {"Milik Pribadi": 0, "Sewa": 1, "Lainnya": 2}

# Ubah kategori ke angka sesuai mapping
for key in inputs:
    if key == "land_surface_condition":
        inputs[key] = land_surface_condition_dict[inputs[key]]
    elif key == "foundation_type":
        inputs[key] = foundation_type_dict[inputs[key]]
    elif key == "roof_type":
        inputs[key] = roof_type_dict[inputs[key]]
    elif key == "ground_floor_type":
        inputs[key] = ground_floor_type_dict[inputs[key]]
    elif key == "other_floor_type":
        inputs[key] = other_floor_type_dict[inputs[key]]
    elif key == "position":
        inputs[key] = position_dict[inputs[key]]
    elif key == "plan_configuration":
        inputs[key] = plan_configuration_dict[inputs[key]]
    elif key == "has_superstructure_timber":
        inputs[key] = has_superstructure_timber_dict[inputs[key]]
    elif key == "legal_ownership_status":
        inputs[key] = legal_ownership_status_dict[inputs[key]]

# Buat DataFrame input sesuai urutan kolom feature_names
data = pd.DataFrame([inputs], columns=feature_names)

if st.button("🔍 Prediksi"):
    try:
        data_scaled = scaler.transform(data)
        data_pca = pca.transform(data_scaled)
        pred = model.predict(data_pca)[0]
        label = ["Low", "Medium", "High"][int(pred)]
        st.success(f"🏷️ Hasil Prediksi Tingkat Kerusakan: **{label}**")
    except Exception as e:
        st.error(f"Terjadi kesalahan: {e}")

