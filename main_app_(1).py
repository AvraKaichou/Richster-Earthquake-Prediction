# -*- coding: utf-8 -*-
"""main_app (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jg_q2xl5AhZHQ7082AyMO05nWMICnLY6
"""

import streamlit as st
import joblib
import numpy as np
import pandas as pd

# Load model dan preprocessing
model = joblib.load('catboost_model.pkl')
scaler = joblib.load('scaler.pkl')
pca = joblib.load('pca.pkl')
feature_names = joblib.load('feature_names.pkl')  # total 15 fitur

st.set_page_config(page_title="Prediksi Kerusakan Bangunan", layout="centered")
st.title("üèöÔ∏è Prediksi Tingkat Kerusakan Bangunan akibat Gempa")

# ==== Input dari user ====
geo_level_1_id = st.number_input("Geo Level 1 ID", min_value=0, max_value=50, value=15)
geo_level_2_id = st.number_input("Geo Level 2 ID", min_value=0, max_value=100, value=25)
geo_level_3_id = st.number_input("Geo Level 3 ID", min_value=0, max_value=200, value=50)
count_floors_pre_eq = st.number_input("Jumlah Lantai Sebelum Gempa", min_value=1, value=2)
age = st.number_input("Umur Bangunan (tahun)", min_value=0, value=20)
area_percentage = st.slider("Persentase Area (%)", 0, 100, 10)
height_percentage = st.slider("Persentase Tinggi (%)", 0, 100, 5)

# ==== Fitur kategorikal ====
land_surface = st.selectbox("Kondisi Permukaan Tanah", ["Flat", "Moderate", "Steep"])
foundation = st.selectbox("Tipe Pondasi", ["RC", "Stone", "Mud", "Brick", "Other"])
roof = st.selectbox("Tipe Atap", ["Bamboo", "Metal", "Thatched", "Other"])
ground_floor = st.selectbox("Tipe Lantai Dasar", ["Mud", "Cement", "Wood", "Brick"])
other_floor = st.selectbox("Tipe Lantai Atas", ["None", "Timber", "RC", "Other"])
position = st.selectbox("Posisi Bangunan", ["Attached", "Corner", "Independent"])
plan_config = st.selectbox("Konfigurasi Rencana", ["Rectangular", "Square", "L-shape", "T-shape", "Other"])
count_families = st.number_input("Jumlah Keluarga di Bangunan", min_value=1, value=1)

# ==== Mapping kategori ke angka ====
land_surface_dict = {"Flat": 0, "Moderate": 1, "Steep": 2}
foundation_dict = {"RC": 0, "Stone": 1, "Mud": 2, "Brick": 3, "Other": 4}
roof_dict = {"Bamboo": 0, "Metal": 1, "Thatched": 2, "Other": 3}
ground_floor_dict = {"Mud": 0, "Cement": 1, "Wood": 2, "Brick": 3}
other_floor_dict = {"None": 0, "Timber": 1, "RC": 2, "Other": 3}
position_dict = {"Attached": 0, "Corner": 1, "Independent": 2}
plan_dict = {"Rectangular": 0, "Square": 1, "L-shape": 2, "T-shape": 3, "Other": 4}

# ==== Susun data 15 fitur ====
data_full = np.array([[
    geo_level_1_id,
    geo_level_2_id,
    geo_level_3_id,
    count_floors_pre_eq,
    age,
    area_percentage,
    height_percentage,
    land_surface_dict[land_surface],
    foundation_dict[foundation],
    roof_dict[roof],
    ground_floor_dict[ground_floor],
    other_floor_dict[other_floor],
    position_dict[position],
    plan_dict[plan_config],
    count_families
]])

# Konversi ke DataFrame dengan nama kolom lengkap sesuai training
df = pd.DataFrame(data_full, columns=feature_names)

# ==== Prediksi ====
if st.button("üîç Prediksi"):
    try:
        # Scaling semua fitur
        data_scaled = scaler.transform(df)

        # Buat DataFrame hasil scaling
        df_scaled = pd.DataFrame(data_scaled, columns=feature_names)

        # Hapus fitur yang tidak dipakai PCA
        drop_cols = ['count_floors_pre_eq', 'count_families']
        df_scaled_for_pca = df_scaled.drop(columns=drop_cols)

        # Transformasi PCA
        data_pca = pca.transform(df_scaled_for_pca)

        # Prediksi
        pred = model.predict(data_pca)[0]
        label = ["Low", "Medium", "High"][int(pred)]

        st.success(f"üè∑Ô∏è Hasil Prediksi Tingkat Kerusakan: **{label}**")
    except Exception as e:
        st.error(f"Terjadi kesalahan: {e}")

